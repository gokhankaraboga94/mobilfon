const express = require('express');
const cors = require('cors');
const puppeteer = require('puppeteer');
require('dotenv').config();

const app = express();
const PORT = process.env.PORT || 3000;

// CORS ayarlarƒ±
app.use(cors({
    origin: '*',
    methods: ['GET', 'POST'],
    allowedHeaders: ['Content-Type']
}));

app.use(express.json());

// Health check endpoint
app.get('/', (req, res) => {
    res.json({ 
        status: 'Server is running', 
        endpoints: ['/api/mobilfon/search/:barcode'] 
    });
});

// Mobilfon veri √ßekme endpoint'i
app.get('/api/mobilfon/search/:barcode', async (req, res) => {
    const barcode = req.params.barcode;
    
    // Barkod validasyonu
    if (!barcode || barcode.length !== 15 || !/^\d+$/.test(barcode)) {
        return res.status(400).json({ 
            error: 'Ge√ßersiz barkod formatƒ±',
            message: 'Barkod 15 haneli sayƒ±sal deƒüer olmalƒ±dƒ±r' 
        });
    }

    let browser = null;
    let page = null;
    
    try {
        console.log(`üîç Barkod aranƒ±yor: ${barcode}`);
        
        // Puppeteer browser ba≈ülat (DEBUG MODE)
        browser = await puppeteer.launch({
            headless: false, // Tarayƒ±cƒ±yƒ± g√∂rmek i√ßin false
            args: [
                '--no-sandbox',
                '--disable-setuid-sandbox',
                '--disable-dev-shm-usage',
                '--disable-gpu',
                '--start-maximized'
            ],
            ignoreHTTPSErrors: true,
            defaultViewport: null
        });

        page = await browser.newPage();
        
        // User agent ayarla
        await page.setUserAgent('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36');

        console.log('üìÑ Login sayfasƒ±na gidiliyor...');
        
        // Login sayfasƒ±na git
        await page.goto('https://bayi.mobilfon.com/mobilfon_framework/admin/qc_list', {
            waitUntil: 'networkidle2',
            timeout: 30000
        });

        // Login formunu bekle
        await page.waitForTimeout(2000);

        console.log('üîê Login bilgileri giriliyor...');
        
        // Farklƒ± selector kombinasyonlarƒ± dene
        const emailSelectors = [
            'input[type="email"]',
            'input[name="email"]',
            'input#email',
            'input[placeholder*="email" i]',
            'input[placeholder*="e-posta" i]'
        ];
        
        const passwordSelectors = [
            'input[type="password"]',
            'input[name="password"]',
            'input#password',
            'input[placeholder*="password" i]',
            'input[placeholder*="≈üifre" i]'
        ];

        // Email input'u bul ve doldur
        let emailFilled = false;
        for (const selector of emailSelectors) {
            try {
                await page.waitForSelector(selector, { timeout: 3000 });
                await page.type(selector, 'gokhan.karaboga@mobilfon.com', { delay: 50 });
                emailFilled = true;
                console.log(`‚úÖ Email girildi (selector: ${selector})`);
                break;
            } catch (e) {
                continue;
            }
        }

        if (!emailFilled) {
            throw new Error('Email input bulunamadƒ±');
        }

        // Password input'u bul ve doldur
        let passwordFilled = false;
        for (const selector of passwordSelectors) {
            try {
                await page.waitForSelector(selector, { timeout: 3000 });
                await page.type(selector, 'Gkhn@2025!', { delay: 50 });
                passwordFilled = true;
                console.log(`‚úÖ ≈ûifre girildi (selector: ${selector})`);
                break;
            } catch (e) {
                continue;
            }
        }

        if (!passwordFilled) {
            throw new Error('Password input bulunamadƒ±');
        }

        // Login butonunu bul
        const loginButtonSelectors = [
            'button[type="submit"]',
            'input[type="submit"]',
            'button.btn-primary',
            'button:contains("Giri≈ü")',
            'input[value*="Giri≈ü" i]'
        ];

        let loginClicked = false;
        for (const selector of loginButtonSelectors) {
            try {
                await page.waitForSelector(selector, { timeout: 2000 });
                await page.click(selector);
                loginClicked = true;
                console.log(`‚úÖ Login butonuna tƒ±klandƒ± (selector: ${selector})`);
                break;
            } catch (e) {
                continue;
            }
        }

        if (!loginClicked) {
            // Enter'a bas
            await page.keyboard.press('Enter');
            console.log('‚úÖ Enter tu≈üuna basƒ±ldƒ±');
        }

        console.log('‚è≥ Login sonrasƒ± sayfa y√ºkleniyor...');
        
        // Login sonrasƒ± bekle
        await page.waitForTimeout(3000);

        // QC list sayfasƒ±na git
        const currentUrl = page.url();
        console.log(`üìç Mevcut URL: ${currentUrl}`);
        
        if (!currentUrl.includes('qc_list')) {
            console.log('üîÑ QC list sayfasƒ±na y√∂nlendiriliyor...');
            await page.goto('https://bayi.mobilfon.com/mobilfon_framework/admin/qc_list', {
                waitUntil: 'networkidle2',
                timeout: 30000
            });
        }

        await page.waitForTimeout(2000);

        console.log('üîç Barkod arama yapƒ±lƒ±yor...');
        
        // Arama input'larƒ±
        const searchSelectors = [
            'input.form-control.form-control-sm',
            'input[type="search"]',
            'input[placeholder*="Ara" i]',
            'input.search',
            '#search'
        ];

        let searchFilled = false;
        for (const selector of searchSelectors) {
            try {
                await page.waitForSelector(selector, { timeout: 3000 });
                await page.type(selector, barcode, { delay: 100 });
                searchFilled = true;
                console.log(`‚úÖ Barkod girildi (selector: ${selector})`);
                break;
            } catch (e) {
                continue;
            }
        }

        if (!searchFilled) {
            throw new Error('Arama input bulunamadƒ±');
        }

        // Enter'a bas
        await page.keyboard.press('Enter');
        
        console.log('‚è≥ Arama sonu√ßlarƒ± y√ºkleniyor...');
        console.log('‚è∞ 30 saniye bekleniyor (sonu√ßlarƒ±n tam y√ºklenmesi i√ßin)...');
        await page.waitForTimeout(30000); // 30 saniye bekle

        // Screenshot al (debug i√ßin)
        await page.screenshot({ path: 'debug-after-search.png', fullPage: true });
        console.log('üì∏ Screenshot alƒ±ndƒ±: debug-after-search.png');

        // Sayfadaki t√ºm linkleri kontrol et
        const pageContent = await page.content();
        console.log('üìÑ Sayfa i√ßeriƒüi kontrol ediliyor...');

        // Farklƒ± buton selector'larƒ± dene
        const buttonSelectors = [
            'a.btn.btn-primary',
            'button.btn.btn-primary',
            'a:contains("Kalite")',
            'a:contains("QC")',
            'a:contains("Detay")',
            'a[href*="qc"]',
            'a.btn',
            'button.btn'
        ];

        let buttonFound = false;
        let buttonElement = null;

        for (const selector of buttonSelectors) {
            try {
                // Selector'ƒ± bekle - S√úRE ARTTIRILDI
                await page.waitForSelector(selector, { timeout: 10000, visible: true });
                
                // T√ºm elementleri al
                const elements = await page.$$(selector);
                
                if (elements.length > 0) {
                    console.log(`‚úÖ ${elements.length} adet '${selector}' bulundu`);
                    
                    // "Kalite Kontrol Yap" text'i i√ßeren elementi bul
                    for (const el of elements) {
                        const buttonText = await page.evaluate(element => element.textContent, el);
                        console.log(`üìù Buton metni: "${buttonText.trim()}"`);
                        
                        if (buttonText.toLowerCase().includes('kalite') || 
                            buttonText.toLowerCase().includes('kontrol') ||
                            buttonText.toLowerCase().includes('qc')) {
                            buttonElement = el;
                            buttonFound = true;
                            console.log(`‚úÖ Doƒüru buton bulundu: "${buttonText.trim()}"`);
                            break;
                        }
                    }
                    
                    if (buttonFound) break;
                }
            } catch (e) {
                console.log(`‚ö†Ô∏è '${selector}' bulunamadƒ±, devam ediliyor...`);
                continue;
            }
        }

        if (!buttonFound) {
            // Tablo veya liste var mƒ± kontrol et
            const hasResults = await page.evaluate(() => {
                const tables = document.querySelectorAll('table');
                const rows = document.querySelectorAll('tr');
                return tables.length > 0 || rows.length > 5;
            });

            if (hasResults) {
                console.log('‚ö†Ô∏è Sonu√ß bulundu ama buton yok - Alternatif y√∂ntem deneniyor');
                
                // Direkt par√ßa bilgilerini √ßekmeyi dene
                const partsData = await page.evaluate(() => {
                    const results = { parts: [], found: false };
                    
                    // "Kullanƒ±lan Par√ßalar" text'ini ara
                    const allText = document.body.innerText;
                    if (allText.includes('par√ßa') || allText.includes('Par√ßa')) {
                        results.found = true;
                        
                        // T√ºm table row'larƒ± kontrol et
                        const rows = Array.from(document.querySelectorAll('tr, li'));
                        rows.forEach(row => {
                            const text = row.textContent.trim();
                            if (text && text.length > 0 && text.length < 100) {
                                results.parts.push(text);
                            }
                        });
                    }
                    
                    return results;
                });

                if (partsData.found && partsData.parts.length > 0) {
                    await browser.close();
                    return res.json({
                        success: true,
                        barcode: barcode,
                        mobilfonData: {
                            parts: partsData.parts.slice(0, 10), // ƒ∞lk 10 sonu√ß
                            partsCount: partsData.parts.length,
                            fetchedAt: new Date().toLocaleString('tr-TR'),
                            method: 'Alternative scraping'
                        }
                    });
                }
            }

            throw new Error('Kalite kontrol butonu bulunamadƒ± - Barkod sistemde olmayabilir veya sayfa yapƒ±sƒ± deƒüi≈ümi≈ü');
        }

        console.log('üñ±Ô∏è Kalite kontrol butonuna tƒ±klanƒ±yor...');
        
        // Butonu scroll ile g√∂r√ºn√ºr hale getir
        await page.evaluate((element) => {
            element.scrollIntoView({ behavior: 'smooth', block: 'center' });
        }, buttonElement);
        
        await page.waitForTimeout(2000);
        
        // Butonun href'ini al (link ise)
        const buttonHref = await page.evaluate(el => el.href, buttonElement);
        console.log('üîó Buton href:', buttonHref);
        
        // Eƒüer href varsa direkt o sayfaya git
        if (buttonHref) {
            console.log('üîÑ Direkt link kullanƒ±larak sayfaya gidiliyor...');
            await page.goto(buttonHref, {
                waitUntil: 'networkidle2',
                timeout: 30000
            });
        } else {
            // Href yoksa butona tƒ±kla
            console.log('üñ±Ô∏è Butona tƒ±klanƒ±yor...');
            
            // Yeni pencere a√ßƒ±lƒ±rsa yakalayalƒ±m
            const [newTarget] = await Promise.all([
                new Promise(resolve => {
                    browser.once('targetcreated', target => resolve(target));
                    setTimeout(() => resolve(null), 5000); // 5 saniye timeout
                }),
                buttonElement.click().catch(err => {
                    console.log('‚ö†Ô∏è Click hatasƒ±:', err.message);
                })
            ]);
            
            if (newTarget) {
                console.log('üìÑ Yeni pencere a√ßƒ±ldƒ±');
                const newPage = await newTarget.page();
                await newPage.waitForTimeout(3000);
                // Yeni sayfayƒ± kullan
                await page.close();
                page = newPage;
            }
        }
        
        // Ekstra bekle
        await page.waitForTimeout(5000);
        
        console.log('üìä Par√ßa bilgileri √ßekiliyor...');
        
        // ƒ∞kinci screenshot (par√ßa sayfasƒ±)
        await page.screenshot({ path: 'debug-parts-page.png', fullPage: true });
        console.log('üì∏ Par√ßa sayfasƒ± screenshot alƒ±ndƒ±: debug-parts-page.png');
        
        // Par√ßa bilgilerini √ßek
        const partsData = await page.evaluate(() => {
            const results = {
                parts: [],
                technician: '',
                date: '',
                status: ''
            };
            
            // "Par√ßalar" ba≈ülƒ±ƒüƒ±nƒ± ara
            const headers = Array.from(document.querySelectorAll('h1, h2, h3, h4, h5, strong, b'));
            const partsHeader = headers.find(h => 
                h.textContent.toLowerCase().includes('par√ßa') ||
                h.textContent.toLowerCase().includes('kullanƒ±lan')
            );
            
            if (partsHeader) {
                let container = partsHeader.nextElementSibling;
                
                // Container'ƒ± bul
                while (container && !['UL', 'TABLE', 'DIV'].includes(container.tagName)) {
                    container = container.nextElementSibling;
                }
                
                if (container) {
                    // List items veya table rows
                    const items = container.querySelectorAll('li, tr, .part-item, .row');
                    
                    items.forEach(item => {
                        const text = item.textContent.trim();
                        if (text && text.length > 0 && text.length < 200) {
                            results.parts.push(text);
                        }
                    });
                    
                    // Eƒüer bulunamadƒ±ysa, t√ºm text i√ßeriƒüini al
                    if (results.parts.length === 0) {
                        const text = container.textContent.trim();
                        const lines = text.split('\n')
                            .map(l => l.trim())
                            .filter(l => l.length > 0 && l.length < 200);
                        results.parts = lines;
                    }
                }
            }
            
            // Teknisyen bilgisi
            const allText = document.body.innerText;
            const techMatch = allText.match(/teknisyen[:\s]+([^\n]+)/i);
            if (techMatch) {
                results.technician = techMatch[1].trim();
            }
            
            return results;
        });

        await browser.close();
        browser = null;

        console.log('‚úÖ Veri ba≈üarƒ±yla √ßekildi');
        console.log('üì¶ Par√ßa sayƒ±sƒ±:', partsData.parts.length);

        // Sonu√ßlarƒ± d√∂nd√ºr
        res.json({
            success: true,
            barcode: barcode,
            mobilfonData: {
                parts: partsData.parts,
                technician: partsData.technician,
                partsCount: partsData.parts.length,
                fetchedAt: new Date().toLocaleString('tr-TR')
            }
        });

    } catch (error) {
        console.error('‚ùå Hata olu≈ütu:', error.message);
        
        if (browser) {
            await browser.close().catch(() => {});
        }
        
        res.status(500).json({
            success: false,
            error: 'Veri √ßekilirken hata olu≈ütu',
            message: error.message,
            barcode: barcode,
            hint: 'Barkod Mobilfon sisteminde olmayabilir veya sayfa yapƒ±sƒ± deƒüi≈ümi≈ü olabilir'
        });
    }
});

// Hata yakalama middleware
app.use((err, req, res, next) => {
    console.error('Server Error:', err);
    res.status(500).json({ 
        error: 'Internal Server Error',
        message: err.message 
    });
});

// Server'ƒ± ba≈ülat
app.listen(PORT, () => {
    console.log(`üöÄ Mobilfon Scraper API √ßalƒ±≈üƒ±yor: http://localhost:${PORT}`);
    console.log(`üì° Endpoint: http://localhost:${PORT}/api/mobilfon/search/:barcode`);
    console.log(`üí° √ñrnek: http://localhost:${PORT}/api/mobilfon/search/123456789012345`);
    console.log(`üîç DEBUG MODE: Tarayƒ±cƒ± g√∂r√ºn√ºr olacak`);
    console.log(`‚è∞ Bekleme s√ºresi: 30 saniye`);
});
